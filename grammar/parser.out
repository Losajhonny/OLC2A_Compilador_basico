Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    coma
    comentario_multilinea
    comentario_simple
    dpuntos
    end

Grammar

Rule 0     S' -> init
Rule 1     init -> Lsent
Rule 2     init -> empty
Rule 3     empty -> <empty>
Rule 4     Lsent -> Lsent sent
Rule 5     Lsent -> sent
Rule 6     sent -> iif
Rule 7     sent -> wwhile
Rule 8     sent -> dowhile
Rule 9     sent -> ffor
Rule 10    sent -> asign
Rule 11    iif -> if condicion then llai Lsent llad
Rule 12    iif -> if condicion then llai Lsent llad else llai Lsent llad
Rule 13    ffor -> for id igual expresion to expresion do llai Lsent llad
Rule 14    wwhile -> while condicion do llai Lsent llad
Rule 15    dowhile -> do llai Lsent llad while condicion pyc
Rule 16    asign -> id igual expresion pyc
Rule 17    condicion -> condicion or condicion
Rule 18    condicion -> condicion xor condicion
Rule 19    condicion -> condicion and condicion
Rule 20    condicion -> not condicion
Rule 21    condicion -> pari condicion pard
Rule 22    condicion -> expresion mayque expresion
Rule 23    condicion -> expresion menque expresion
Rule 24    condicion -> expresion mayigual expresion
Rule 25    condicion -> expresion menigual expresion
Rule 26    condicion -> expresion igualque expresion
Rule 27    condicion -> expresion difque expresion
Rule 28    expresion -> expresion mas expresion
Rule 29    expresion -> expresion men expresion
Rule 30    expresion -> expresion por expresion
Rule 31    expresion -> expresion div expresion
Rule 32    expresion -> expresion mod expresion
Rule 33    expresion -> expresion pow expresion
Rule 34    expresion -> men expresion
Rule 35    expresion -> pari expresion pard
Rule 36    expresion -> entero
Rule 37    expresion -> decimal
Rule 38    expresion -> cadena
Rule 39    expresion -> caracter
Rule 40    expresion -> id

Terminals, with rules where they appear

and                  : 19
cadena               : 38
caracter             : 39
coma                 : 
comentario_multilinea : 
comentario_simple    : 
decimal              : 37
difque               : 27
div                  : 31
do                   : 13 14 15
dpuntos              : 
else                 : 12
end                  : 
entero               : 36
error                : 
for                  : 13
id                   : 13 16 40
if                   : 11 12
igual                : 13 16
igualque             : 26
llad                 : 11 12 12 13 14 15
llai                 : 11 12 12 13 14 15
mas                  : 28
mayigual             : 24
mayque               : 22
men                  : 29 34
menigual             : 25
menque               : 23
mod                  : 32
not                  : 20
or                   : 17
pard                 : 21 35
pari                 : 21 35
por                  : 30
pow                  : 33
pyc                  : 15 16
then                 : 11 12
to                   : 13
while                : 14 15
xor                  : 18

Nonterminals, with rules where they appear

Lsent                : 1 4 11 12 12 13 14 15
asign                : 10
condicion            : 11 12 14 15 17 17 18 18 19 19 20 21
dowhile              : 8
empty                : 2
expresion            : 13 13 16 22 22 23 23 24 24 25 25 26 26 27 27 28 28 29 29 30 30 31 31 32 32 33 33 34 35
ffor                 : 9
iif                  : 6
init                 : 0
sent                 : 4 5
wwhile               : 7

Parsing method: LALR

state 0

    (0) S' -> . init
    (1) init -> . Lsent
    (2) init -> . empty
    (4) Lsent -> . Lsent sent
    (5) Lsent -> . sent
    (3) empty -> .
    (6) sent -> . iif
    (7) sent -> . wwhile
    (8) sent -> . dowhile
    (9) sent -> . ffor
    (10) sent -> . asign
    (11) iif -> . if condicion then llai Lsent llad
    (12) iif -> . if condicion then llai Lsent llad else llai Lsent llad
    (14) wwhile -> . while condicion do llai Lsent llad
    (15) dowhile -> . do llai Lsent llad while condicion pyc
    (13) ffor -> . for id igual expresion to expresion do llai Lsent llad
    (16) asign -> . id igual expresion pyc

    $end            reduce using rule 3 (empty -> .)
    if              shift and go to state 10
    while           shift and go to state 11
    do              shift and go to state 12
    for             shift and go to state 13
    id              shift and go to state 14

    init                           shift and go to state 1
    Lsent                          shift and go to state 2
    empty                          shift and go to state 3
    sent                           shift and go to state 4
    iif                            shift and go to state 5
    wwhile                         shift and go to state 6
    dowhile                        shift and go to state 7
    ffor                           shift and go to state 8
    asign                          shift and go to state 9

state 1

    (0) S' -> init .



state 2

    (1) init -> Lsent .
    (4) Lsent -> Lsent . sent
    (6) sent -> . iif
    (7) sent -> . wwhile
    (8) sent -> . dowhile
    (9) sent -> . ffor
    (10) sent -> . asign
    (11) iif -> . if condicion then llai Lsent llad
    (12) iif -> . if condicion then llai Lsent llad else llai Lsent llad
    (14) wwhile -> . while condicion do llai Lsent llad
    (15) dowhile -> . do llai Lsent llad while condicion pyc
    (13) ffor -> . for id igual expresion to expresion do llai Lsent llad
    (16) asign -> . id igual expresion pyc

    $end            reduce using rule 1 (init -> Lsent .)
    if              shift and go to state 10
    while           shift and go to state 11
    do              shift and go to state 12
    for             shift and go to state 13
    id              shift and go to state 14

    sent                           shift and go to state 15
    iif                            shift and go to state 5
    wwhile                         shift and go to state 6
    dowhile                        shift and go to state 7
    ffor                           shift and go to state 8
    asign                          shift and go to state 9

state 3

    (2) init -> empty .

    $end            reduce using rule 2 (init -> empty .)


state 4

    (5) Lsent -> sent .

    if              reduce using rule 5 (Lsent -> sent .)
    while           reduce using rule 5 (Lsent -> sent .)
    do              reduce using rule 5 (Lsent -> sent .)
    for             reduce using rule 5 (Lsent -> sent .)
    id              reduce using rule 5 (Lsent -> sent .)
    $end            reduce using rule 5 (Lsent -> sent .)
    llad            reduce using rule 5 (Lsent -> sent .)


state 5

    (6) sent -> iif .

    if              reduce using rule 6 (sent -> iif .)
    while           reduce using rule 6 (sent -> iif .)
    do              reduce using rule 6 (sent -> iif .)
    for             reduce using rule 6 (sent -> iif .)
    id              reduce using rule 6 (sent -> iif .)
    $end            reduce using rule 6 (sent -> iif .)
    llad            reduce using rule 6 (sent -> iif .)


state 6

    (7) sent -> wwhile .

    if              reduce using rule 7 (sent -> wwhile .)
    while           reduce using rule 7 (sent -> wwhile .)
    do              reduce using rule 7 (sent -> wwhile .)
    for             reduce using rule 7 (sent -> wwhile .)
    id              reduce using rule 7 (sent -> wwhile .)
    $end            reduce using rule 7 (sent -> wwhile .)
    llad            reduce using rule 7 (sent -> wwhile .)


state 7

    (8) sent -> dowhile .

    if              reduce using rule 8 (sent -> dowhile .)
    while           reduce using rule 8 (sent -> dowhile .)
    do              reduce using rule 8 (sent -> dowhile .)
    for             reduce using rule 8 (sent -> dowhile .)
    id              reduce using rule 8 (sent -> dowhile .)
    $end            reduce using rule 8 (sent -> dowhile .)
    llad            reduce using rule 8 (sent -> dowhile .)


state 8

    (9) sent -> ffor .

    if              reduce using rule 9 (sent -> ffor .)
    while           reduce using rule 9 (sent -> ffor .)
    do              reduce using rule 9 (sent -> ffor .)
    for             reduce using rule 9 (sent -> ffor .)
    id              reduce using rule 9 (sent -> ffor .)
    $end            reduce using rule 9 (sent -> ffor .)
    llad            reduce using rule 9 (sent -> ffor .)


state 9

    (10) sent -> asign .

    if              reduce using rule 10 (sent -> asign .)
    while           reduce using rule 10 (sent -> asign .)
    do              reduce using rule 10 (sent -> asign .)
    for             reduce using rule 10 (sent -> asign .)
    id              reduce using rule 10 (sent -> asign .)
    $end            reduce using rule 10 (sent -> asign .)
    llad            reduce using rule 10 (sent -> asign .)


state 10

    (11) iif -> if . condicion then llai Lsent llad
    (12) iif -> if . condicion then llai Lsent llad else llai Lsent llad
    (17) condicion -> . condicion or condicion
    (18) condicion -> . condicion xor condicion
    (19) condicion -> . condicion and condicion
    (20) condicion -> . not condicion
    (21) condicion -> . pari condicion pard
    (22) condicion -> . expresion mayque expresion
    (23) condicion -> . expresion menque expresion
    (24) condicion -> . expresion mayigual expresion
    (25) condicion -> . expresion menigual expresion
    (26) condicion -> . expresion igualque expresion
    (27) condicion -> . expresion difque expresion
    (28) expresion -> . expresion mas expresion
    (29) expresion -> . expresion men expresion
    (30) expresion -> . expresion por expresion
    (31) expresion -> . expresion div expresion
    (32) expresion -> . expresion mod expresion
    (33) expresion -> . expresion pow expresion
    (34) expresion -> . men expresion
    (35) expresion -> . pari expresion pard
    (36) expresion -> . entero
    (37) expresion -> . decimal
    (38) expresion -> . cadena
    (39) expresion -> . caracter
    (40) expresion -> . id

    not             shift and go to state 17
    pari            shift and go to state 18
    men             shift and go to state 20
    entero          shift and go to state 21
    decimal         shift and go to state 22
    cadena          shift and go to state 23
    caracter        shift and go to state 24
    id              shift and go to state 25

    condicion                      shift and go to state 16
    expresion                      shift and go to state 19

state 11

    (14) wwhile -> while . condicion do llai Lsent llad
    (17) condicion -> . condicion or condicion
    (18) condicion -> . condicion xor condicion
    (19) condicion -> . condicion and condicion
    (20) condicion -> . not condicion
    (21) condicion -> . pari condicion pard
    (22) condicion -> . expresion mayque expresion
    (23) condicion -> . expresion menque expresion
    (24) condicion -> . expresion mayigual expresion
    (25) condicion -> . expresion menigual expresion
    (26) condicion -> . expresion igualque expresion
    (27) condicion -> . expresion difque expresion
    (28) expresion -> . expresion mas expresion
    (29) expresion -> . expresion men expresion
    (30) expresion -> . expresion por expresion
    (31) expresion -> . expresion div expresion
    (32) expresion -> . expresion mod expresion
    (33) expresion -> . expresion pow expresion
    (34) expresion -> . men expresion
    (35) expresion -> . pari expresion pard
    (36) expresion -> . entero
    (37) expresion -> . decimal
    (38) expresion -> . cadena
    (39) expresion -> . caracter
    (40) expresion -> . id

    not             shift and go to state 17
    pari            shift and go to state 18
    men             shift and go to state 20
    entero          shift and go to state 21
    decimal         shift and go to state 22
    cadena          shift and go to state 23
    caracter        shift and go to state 24
    id              shift and go to state 25

    condicion                      shift and go to state 26
    expresion                      shift and go to state 19

state 12

    (15) dowhile -> do . llai Lsent llad while condicion pyc

    llai            shift and go to state 27


state 13

    (13) ffor -> for . id igual expresion to expresion do llai Lsent llad

    id              shift and go to state 28


state 14

    (16) asign -> id . igual expresion pyc

    igual           shift and go to state 29


state 15

    (4) Lsent -> Lsent sent .

    if              reduce using rule 4 (Lsent -> Lsent sent .)
    while           reduce using rule 4 (Lsent -> Lsent sent .)
    do              reduce using rule 4 (Lsent -> Lsent sent .)
    for             reduce using rule 4 (Lsent -> Lsent sent .)
    id              reduce using rule 4 (Lsent -> Lsent sent .)
    $end            reduce using rule 4 (Lsent -> Lsent sent .)
    llad            reduce using rule 4 (Lsent -> Lsent sent .)


state 16

    (11) iif -> if condicion . then llai Lsent llad
    (12) iif -> if condicion . then llai Lsent llad else llai Lsent llad
    (17) condicion -> condicion . or condicion
    (18) condicion -> condicion . xor condicion
    (19) condicion -> condicion . and condicion

    then            shift and go to state 30
    or              shift and go to state 31
    xor             shift and go to state 32
    and             shift and go to state 33


state 17

    (20) condicion -> not . condicion
    (17) condicion -> . condicion or condicion
    (18) condicion -> . condicion xor condicion
    (19) condicion -> . condicion and condicion
    (20) condicion -> . not condicion
    (21) condicion -> . pari condicion pard
    (22) condicion -> . expresion mayque expresion
    (23) condicion -> . expresion menque expresion
    (24) condicion -> . expresion mayigual expresion
    (25) condicion -> . expresion menigual expresion
    (26) condicion -> . expresion igualque expresion
    (27) condicion -> . expresion difque expresion
    (28) expresion -> . expresion mas expresion
    (29) expresion -> . expresion men expresion
    (30) expresion -> . expresion por expresion
    (31) expresion -> . expresion div expresion
    (32) expresion -> . expresion mod expresion
    (33) expresion -> . expresion pow expresion
    (34) expresion -> . men expresion
    (35) expresion -> . pari expresion pard
    (36) expresion -> . entero
    (37) expresion -> . decimal
    (38) expresion -> . cadena
    (39) expresion -> . caracter
    (40) expresion -> . id

    not             shift and go to state 17
    pari            shift and go to state 18
    men             shift and go to state 20
    entero          shift and go to state 21
    decimal         shift and go to state 22
    cadena          shift and go to state 23
    caracter        shift and go to state 24
    id              shift and go to state 25

    condicion                      shift and go to state 34
    expresion                      shift and go to state 19

state 18

    (21) condicion -> pari . condicion pard
    (35) expresion -> pari . expresion pard
    (17) condicion -> . condicion or condicion
    (18) condicion -> . condicion xor condicion
    (19) condicion -> . condicion and condicion
    (20) condicion -> . not condicion
    (21) condicion -> . pari condicion pard
    (22) condicion -> . expresion mayque expresion
    (23) condicion -> . expresion menque expresion
    (24) condicion -> . expresion mayigual expresion
    (25) condicion -> . expresion menigual expresion
    (26) condicion -> . expresion igualque expresion
    (27) condicion -> . expresion difque expresion
    (28) expresion -> . expresion mas expresion
    (29) expresion -> . expresion men expresion
    (30) expresion -> . expresion por expresion
    (31) expresion -> . expresion div expresion
    (32) expresion -> . expresion mod expresion
    (33) expresion -> . expresion pow expresion
    (34) expresion -> . men expresion
    (35) expresion -> . pari expresion pard
    (36) expresion -> . entero
    (37) expresion -> . decimal
    (38) expresion -> . cadena
    (39) expresion -> . caracter
    (40) expresion -> . id

    not             shift and go to state 17
    pari            shift and go to state 18
    men             shift and go to state 20
    entero          shift and go to state 21
    decimal         shift and go to state 22
    cadena          shift and go to state 23
    caracter        shift and go to state 24
    id              shift and go to state 25

    condicion                      shift and go to state 35
    expresion                      shift and go to state 36

state 19

    (22) condicion -> expresion . mayque expresion
    (23) condicion -> expresion . menque expresion
    (24) condicion -> expresion . mayigual expresion
    (25) condicion -> expresion . menigual expresion
    (26) condicion -> expresion . igualque expresion
    (27) condicion -> expresion . difque expresion
    (28) expresion -> expresion . mas expresion
    (29) expresion -> expresion . men expresion
    (30) expresion -> expresion . por expresion
    (31) expresion -> expresion . div expresion
    (32) expresion -> expresion . mod expresion
    (33) expresion -> expresion . pow expresion

    mayque          shift and go to state 37
    menque          shift and go to state 38
    mayigual        shift and go to state 39
    menigual        shift and go to state 40
    igualque        shift and go to state 41
    difque          shift and go to state 42
    mas             shift and go to state 43
    men             shift and go to state 44
    por             shift and go to state 45
    div             shift and go to state 46
    mod             shift and go to state 47
    pow             shift and go to state 48


state 20

    (34) expresion -> men . expresion
    (28) expresion -> . expresion mas expresion
    (29) expresion -> . expresion men expresion
    (30) expresion -> . expresion por expresion
    (31) expresion -> . expresion div expresion
    (32) expresion -> . expresion mod expresion
    (33) expresion -> . expresion pow expresion
    (34) expresion -> . men expresion
    (35) expresion -> . pari expresion pard
    (36) expresion -> . entero
    (37) expresion -> . decimal
    (38) expresion -> . cadena
    (39) expresion -> . caracter
    (40) expresion -> . id

    men             shift and go to state 20
    pari            shift and go to state 50
    entero          shift and go to state 21
    decimal         shift and go to state 22
    cadena          shift and go to state 23
    caracter        shift and go to state 24
    id              shift and go to state 25

    expresion                      shift and go to state 49

state 21

    (36) expresion -> entero .

    mayque          reduce using rule 36 (expresion -> entero .)
    menque          reduce using rule 36 (expresion -> entero .)
    mayigual        reduce using rule 36 (expresion -> entero .)
    menigual        reduce using rule 36 (expresion -> entero .)
    igualque        reduce using rule 36 (expresion -> entero .)
    difque          reduce using rule 36 (expresion -> entero .)
    mas             reduce using rule 36 (expresion -> entero .)
    men             reduce using rule 36 (expresion -> entero .)
    por             reduce using rule 36 (expresion -> entero .)
    div             reduce using rule 36 (expresion -> entero .)
    mod             reduce using rule 36 (expresion -> entero .)
    pow             reduce using rule 36 (expresion -> entero .)
    pard            reduce using rule 36 (expresion -> entero .)
    pyc             reduce using rule 36 (expresion -> entero .)
    then            reduce using rule 36 (expresion -> entero .)
    or              reduce using rule 36 (expresion -> entero .)
    xor             reduce using rule 36 (expresion -> entero .)
    and             reduce using rule 36 (expresion -> entero .)
    do              reduce using rule 36 (expresion -> entero .)
    to              reduce using rule 36 (expresion -> entero .)


state 22

    (37) expresion -> decimal .

    mayque          reduce using rule 37 (expresion -> decimal .)
    menque          reduce using rule 37 (expresion -> decimal .)
    mayigual        reduce using rule 37 (expresion -> decimal .)
    menigual        reduce using rule 37 (expresion -> decimal .)
    igualque        reduce using rule 37 (expresion -> decimal .)
    difque          reduce using rule 37 (expresion -> decimal .)
    mas             reduce using rule 37 (expresion -> decimal .)
    men             reduce using rule 37 (expresion -> decimal .)
    por             reduce using rule 37 (expresion -> decimal .)
    div             reduce using rule 37 (expresion -> decimal .)
    mod             reduce using rule 37 (expresion -> decimal .)
    pow             reduce using rule 37 (expresion -> decimal .)
    pard            reduce using rule 37 (expresion -> decimal .)
    pyc             reduce using rule 37 (expresion -> decimal .)
    then            reduce using rule 37 (expresion -> decimal .)
    or              reduce using rule 37 (expresion -> decimal .)
    xor             reduce using rule 37 (expresion -> decimal .)
    and             reduce using rule 37 (expresion -> decimal .)
    do              reduce using rule 37 (expresion -> decimal .)
    to              reduce using rule 37 (expresion -> decimal .)


state 23

    (38) expresion -> cadena .

    mayque          reduce using rule 38 (expresion -> cadena .)
    menque          reduce using rule 38 (expresion -> cadena .)
    mayigual        reduce using rule 38 (expresion -> cadena .)
    menigual        reduce using rule 38 (expresion -> cadena .)
    igualque        reduce using rule 38 (expresion -> cadena .)
    difque          reduce using rule 38 (expresion -> cadena .)
    mas             reduce using rule 38 (expresion -> cadena .)
    men             reduce using rule 38 (expresion -> cadena .)
    por             reduce using rule 38 (expresion -> cadena .)
    div             reduce using rule 38 (expresion -> cadena .)
    mod             reduce using rule 38 (expresion -> cadena .)
    pow             reduce using rule 38 (expresion -> cadena .)
    pard            reduce using rule 38 (expresion -> cadena .)
    pyc             reduce using rule 38 (expresion -> cadena .)
    then            reduce using rule 38 (expresion -> cadena .)
    or              reduce using rule 38 (expresion -> cadena .)
    xor             reduce using rule 38 (expresion -> cadena .)
    and             reduce using rule 38 (expresion -> cadena .)
    do              reduce using rule 38 (expresion -> cadena .)
    to              reduce using rule 38 (expresion -> cadena .)


state 24

    (39) expresion -> caracter .

    mayque          reduce using rule 39 (expresion -> caracter .)
    menque          reduce using rule 39 (expresion -> caracter .)
    mayigual        reduce using rule 39 (expresion -> caracter .)
    menigual        reduce using rule 39 (expresion -> caracter .)
    igualque        reduce using rule 39 (expresion -> caracter .)
    difque          reduce using rule 39 (expresion -> caracter .)
    mas             reduce using rule 39 (expresion -> caracter .)
    men             reduce using rule 39 (expresion -> caracter .)
    por             reduce using rule 39 (expresion -> caracter .)
    div             reduce using rule 39 (expresion -> caracter .)
    mod             reduce using rule 39 (expresion -> caracter .)
    pow             reduce using rule 39 (expresion -> caracter .)
    pard            reduce using rule 39 (expresion -> caracter .)
    pyc             reduce using rule 39 (expresion -> caracter .)
    then            reduce using rule 39 (expresion -> caracter .)
    or              reduce using rule 39 (expresion -> caracter .)
    xor             reduce using rule 39 (expresion -> caracter .)
    and             reduce using rule 39 (expresion -> caracter .)
    do              reduce using rule 39 (expresion -> caracter .)
    to              reduce using rule 39 (expresion -> caracter .)


state 25

    (40) expresion -> id .

    mayque          reduce using rule 40 (expresion -> id .)
    menque          reduce using rule 40 (expresion -> id .)
    mayigual        reduce using rule 40 (expresion -> id .)
    menigual        reduce using rule 40 (expresion -> id .)
    igualque        reduce using rule 40 (expresion -> id .)
    difque          reduce using rule 40 (expresion -> id .)
    mas             reduce using rule 40 (expresion -> id .)
    men             reduce using rule 40 (expresion -> id .)
    por             reduce using rule 40 (expresion -> id .)
    div             reduce using rule 40 (expresion -> id .)
    mod             reduce using rule 40 (expresion -> id .)
    pow             reduce using rule 40 (expresion -> id .)
    pard            reduce using rule 40 (expresion -> id .)
    pyc             reduce using rule 40 (expresion -> id .)
    then            reduce using rule 40 (expresion -> id .)
    or              reduce using rule 40 (expresion -> id .)
    xor             reduce using rule 40 (expresion -> id .)
    and             reduce using rule 40 (expresion -> id .)
    do              reduce using rule 40 (expresion -> id .)
    to              reduce using rule 40 (expresion -> id .)


state 26

    (14) wwhile -> while condicion . do llai Lsent llad
    (17) condicion -> condicion . or condicion
    (18) condicion -> condicion . xor condicion
    (19) condicion -> condicion . and condicion

    do              shift and go to state 51
    or              shift and go to state 31
    xor             shift and go to state 32
    and             shift and go to state 33


state 27

    (15) dowhile -> do llai . Lsent llad while condicion pyc
    (4) Lsent -> . Lsent sent
    (5) Lsent -> . sent
    (6) sent -> . iif
    (7) sent -> . wwhile
    (8) sent -> . dowhile
    (9) sent -> . ffor
    (10) sent -> . asign
    (11) iif -> . if condicion then llai Lsent llad
    (12) iif -> . if condicion then llai Lsent llad else llai Lsent llad
    (14) wwhile -> . while condicion do llai Lsent llad
    (15) dowhile -> . do llai Lsent llad while condicion pyc
    (13) ffor -> . for id igual expresion to expresion do llai Lsent llad
    (16) asign -> . id igual expresion pyc

    if              shift and go to state 10
    while           shift and go to state 11
    do              shift and go to state 12
    for             shift and go to state 13
    id              shift and go to state 14

    Lsent                          shift and go to state 52
    sent                           shift and go to state 4
    iif                            shift and go to state 5
    wwhile                         shift and go to state 6
    dowhile                        shift and go to state 7
    ffor                           shift and go to state 8
    asign                          shift and go to state 9

state 28

    (13) ffor -> for id . igual expresion to expresion do llai Lsent llad

    igual           shift and go to state 53


state 29

    (16) asign -> id igual . expresion pyc
    (28) expresion -> . expresion mas expresion
    (29) expresion -> . expresion men expresion
    (30) expresion -> . expresion por expresion
    (31) expresion -> . expresion div expresion
    (32) expresion -> . expresion mod expresion
    (33) expresion -> . expresion pow expresion
    (34) expresion -> . men expresion
    (35) expresion -> . pari expresion pard
    (36) expresion -> . entero
    (37) expresion -> . decimal
    (38) expresion -> . cadena
    (39) expresion -> . caracter
    (40) expresion -> . id

    men             shift and go to state 20
    pari            shift and go to state 50
    entero          shift and go to state 21
    decimal         shift and go to state 22
    cadena          shift and go to state 23
    caracter        shift and go to state 24
    id              shift and go to state 25

    expresion                      shift and go to state 54

state 30

    (11) iif -> if condicion then . llai Lsent llad
    (12) iif -> if condicion then . llai Lsent llad else llai Lsent llad

    llai            shift and go to state 55


state 31

    (17) condicion -> condicion or . condicion
    (17) condicion -> . condicion or condicion
    (18) condicion -> . condicion xor condicion
    (19) condicion -> . condicion and condicion
    (20) condicion -> . not condicion
    (21) condicion -> . pari condicion pard
    (22) condicion -> . expresion mayque expresion
    (23) condicion -> . expresion menque expresion
    (24) condicion -> . expresion mayigual expresion
    (25) condicion -> . expresion menigual expresion
    (26) condicion -> . expresion igualque expresion
    (27) condicion -> . expresion difque expresion
    (28) expresion -> . expresion mas expresion
    (29) expresion -> . expresion men expresion
    (30) expresion -> . expresion por expresion
    (31) expresion -> . expresion div expresion
    (32) expresion -> . expresion mod expresion
    (33) expresion -> . expresion pow expresion
    (34) expresion -> . men expresion
    (35) expresion -> . pari expresion pard
    (36) expresion -> . entero
    (37) expresion -> . decimal
    (38) expresion -> . cadena
    (39) expresion -> . caracter
    (40) expresion -> . id

    not             shift and go to state 17
    pari            shift and go to state 18
    men             shift and go to state 20
    entero          shift and go to state 21
    decimal         shift and go to state 22
    cadena          shift and go to state 23
    caracter        shift and go to state 24
    id              shift and go to state 25

    condicion                      shift and go to state 56
    expresion                      shift and go to state 19

state 32

    (18) condicion -> condicion xor . condicion
    (17) condicion -> . condicion or condicion
    (18) condicion -> . condicion xor condicion
    (19) condicion -> . condicion and condicion
    (20) condicion -> . not condicion
    (21) condicion -> . pari condicion pard
    (22) condicion -> . expresion mayque expresion
    (23) condicion -> . expresion menque expresion
    (24) condicion -> . expresion mayigual expresion
    (25) condicion -> . expresion menigual expresion
    (26) condicion -> . expresion igualque expresion
    (27) condicion -> . expresion difque expresion
    (28) expresion -> . expresion mas expresion
    (29) expresion -> . expresion men expresion
    (30) expresion -> . expresion por expresion
    (31) expresion -> . expresion div expresion
    (32) expresion -> . expresion mod expresion
    (33) expresion -> . expresion pow expresion
    (34) expresion -> . men expresion
    (35) expresion -> . pari expresion pard
    (36) expresion -> . entero
    (37) expresion -> . decimal
    (38) expresion -> . cadena
    (39) expresion -> . caracter
    (40) expresion -> . id

    not             shift and go to state 17
    pari            shift and go to state 18
    men             shift and go to state 20
    entero          shift and go to state 21
    decimal         shift and go to state 22
    cadena          shift and go to state 23
    caracter        shift and go to state 24
    id              shift and go to state 25

    condicion                      shift and go to state 57
    expresion                      shift and go to state 19

state 33

    (19) condicion -> condicion and . condicion
    (17) condicion -> . condicion or condicion
    (18) condicion -> . condicion xor condicion
    (19) condicion -> . condicion and condicion
    (20) condicion -> . not condicion
    (21) condicion -> . pari condicion pard
    (22) condicion -> . expresion mayque expresion
    (23) condicion -> . expresion menque expresion
    (24) condicion -> . expresion mayigual expresion
    (25) condicion -> . expresion menigual expresion
    (26) condicion -> . expresion igualque expresion
    (27) condicion -> . expresion difque expresion
    (28) expresion -> . expresion mas expresion
    (29) expresion -> . expresion men expresion
    (30) expresion -> . expresion por expresion
    (31) expresion -> . expresion div expresion
    (32) expresion -> . expresion mod expresion
    (33) expresion -> . expresion pow expresion
    (34) expresion -> . men expresion
    (35) expresion -> . pari expresion pard
    (36) expresion -> . entero
    (37) expresion -> . decimal
    (38) expresion -> . cadena
    (39) expresion -> . caracter
    (40) expresion -> . id

    not             shift and go to state 17
    pari            shift and go to state 18
    men             shift and go to state 20
    entero          shift and go to state 21
    decimal         shift and go to state 22
    cadena          shift and go to state 23
    caracter        shift and go to state 24
    id              shift and go to state 25

    condicion                      shift and go to state 58
    expresion                      shift and go to state 19

state 34

    (20) condicion -> not condicion .
    (17) condicion -> condicion . or condicion
    (18) condicion -> condicion . xor condicion
    (19) condicion -> condicion . and condicion

    then            reduce using rule 20 (condicion -> not condicion .)
    or              reduce using rule 20 (condicion -> not condicion .)
    xor             reduce using rule 20 (condicion -> not condicion .)
    and             reduce using rule 20 (condicion -> not condicion .)
    do              reduce using rule 20 (condicion -> not condicion .)
    pard            reduce using rule 20 (condicion -> not condicion .)
    pyc             reduce using rule 20 (condicion -> not condicion .)

  ! or              [ shift and go to state 31 ]
  ! xor             [ shift and go to state 32 ]
  ! and             [ shift and go to state 33 ]


state 35

    (21) condicion -> pari condicion . pard
    (17) condicion -> condicion . or condicion
    (18) condicion -> condicion . xor condicion
    (19) condicion -> condicion . and condicion

    pard            shift and go to state 59
    or              shift and go to state 31
    xor             shift and go to state 32
    and             shift and go to state 33


state 36

    (35) expresion -> pari expresion . pard
    (22) condicion -> expresion . mayque expresion
    (23) condicion -> expresion . menque expresion
    (24) condicion -> expresion . mayigual expresion
    (25) condicion -> expresion . menigual expresion
    (26) condicion -> expresion . igualque expresion
    (27) condicion -> expresion . difque expresion
    (28) expresion -> expresion . mas expresion
    (29) expresion -> expresion . men expresion
    (30) expresion -> expresion . por expresion
    (31) expresion -> expresion . div expresion
    (32) expresion -> expresion . mod expresion
    (33) expresion -> expresion . pow expresion

    pard            shift and go to state 60
    mayque          shift and go to state 37
    menque          shift and go to state 38
    mayigual        shift and go to state 39
    menigual        shift and go to state 40
    igualque        shift and go to state 41
    difque          shift and go to state 42
    mas             shift and go to state 43
    men             shift and go to state 44
    por             shift and go to state 45
    div             shift and go to state 46
    mod             shift and go to state 47
    pow             shift and go to state 48


state 37

    (22) condicion -> expresion mayque . expresion
    (28) expresion -> . expresion mas expresion
    (29) expresion -> . expresion men expresion
    (30) expresion -> . expresion por expresion
    (31) expresion -> . expresion div expresion
    (32) expresion -> . expresion mod expresion
    (33) expresion -> . expresion pow expresion
    (34) expresion -> . men expresion
    (35) expresion -> . pari expresion pard
    (36) expresion -> . entero
    (37) expresion -> . decimal
    (38) expresion -> . cadena
    (39) expresion -> . caracter
    (40) expresion -> . id

    men             shift and go to state 20
    pari            shift and go to state 50
    entero          shift and go to state 21
    decimal         shift and go to state 22
    cadena          shift and go to state 23
    caracter        shift and go to state 24
    id              shift and go to state 25

    expresion                      shift and go to state 61

state 38

    (23) condicion -> expresion menque . expresion
    (28) expresion -> . expresion mas expresion
    (29) expresion -> . expresion men expresion
    (30) expresion -> . expresion por expresion
    (31) expresion -> . expresion div expresion
    (32) expresion -> . expresion mod expresion
    (33) expresion -> . expresion pow expresion
    (34) expresion -> . men expresion
    (35) expresion -> . pari expresion pard
    (36) expresion -> . entero
    (37) expresion -> . decimal
    (38) expresion -> . cadena
    (39) expresion -> . caracter
    (40) expresion -> . id

    men             shift and go to state 20
    pari            shift and go to state 50
    entero          shift and go to state 21
    decimal         shift and go to state 22
    cadena          shift and go to state 23
    caracter        shift and go to state 24
    id              shift and go to state 25

    expresion                      shift and go to state 62

state 39

    (24) condicion -> expresion mayigual . expresion
    (28) expresion -> . expresion mas expresion
    (29) expresion -> . expresion men expresion
    (30) expresion -> . expresion por expresion
    (31) expresion -> . expresion div expresion
    (32) expresion -> . expresion mod expresion
    (33) expresion -> . expresion pow expresion
    (34) expresion -> . men expresion
    (35) expresion -> . pari expresion pard
    (36) expresion -> . entero
    (37) expresion -> . decimal
    (38) expresion -> . cadena
    (39) expresion -> . caracter
    (40) expresion -> . id

    men             shift and go to state 20
    pari            shift and go to state 50
    entero          shift and go to state 21
    decimal         shift and go to state 22
    cadena          shift and go to state 23
    caracter        shift and go to state 24
    id              shift and go to state 25

    expresion                      shift and go to state 63

state 40

    (25) condicion -> expresion menigual . expresion
    (28) expresion -> . expresion mas expresion
    (29) expresion -> . expresion men expresion
    (30) expresion -> . expresion por expresion
    (31) expresion -> . expresion div expresion
    (32) expresion -> . expresion mod expresion
    (33) expresion -> . expresion pow expresion
    (34) expresion -> . men expresion
    (35) expresion -> . pari expresion pard
    (36) expresion -> . entero
    (37) expresion -> . decimal
    (38) expresion -> . cadena
    (39) expresion -> . caracter
    (40) expresion -> . id

    men             shift and go to state 20
    pari            shift and go to state 50
    entero          shift and go to state 21
    decimal         shift and go to state 22
    cadena          shift and go to state 23
    caracter        shift and go to state 24
    id              shift and go to state 25

    expresion                      shift and go to state 64

state 41

    (26) condicion -> expresion igualque . expresion
    (28) expresion -> . expresion mas expresion
    (29) expresion -> . expresion men expresion
    (30) expresion -> . expresion por expresion
    (31) expresion -> . expresion div expresion
    (32) expresion -> . expresion mod expresion
    (33) expresion -> . expresion pow expresion
    (34) expresion -> . men expresion
    (35) expresion -> . pari expresion pard
    (36) expresion -> . entero
    (37) expresion -> . decimal
    (38) expresion -> . cadena
    (39) expresion -> . caracter
    (40) expresion -> . id

    men             shift and go to state 20
    pari            shift and go to state 50
    entero          shift and go to state 21
    decimal         shift and go to state 22
    cadena          shift and go to state 23
    caracter        shift and go to state 24
    id              shift and go to state 25

    expresion                      shift and go to state 65

state 42

    (27) condicion -> expresion difque . expresion
    (28) expresion -> . expresion mas expresion
    (29) expresion -> . expresion men expresion
    (30) expresion -> . expresion por expresion
    (31) expresion -> . expresion div expresion
    (32) expresion -> . expresion mod expresion
    (33) expresion -> . expresion pow expresion
    (34) expresion -> . men expresion
    (35) expresion -> . pari expresion pard
    (36) expresion -> . entero
    (37) expresion -> . decimal
    (38) expresion -> . cadena
    (39) expresion -> . caracter
    (40) expresion -> . id

    men             shift and go to state 20
    pari            shift and go to state 50
    entero          shift and go to state 21
    decimal         shift and go to state 22
    cadena          shift and go to state 23
    caracter        shift and go to state 24
    id              shift and go to state 25

    expresion                      shift and go to state 66

state 43

    (28) expresion -> expresion mas . expresion
    (28) expresion -> . expresion mas expresion
    (29) expresion -> . expresion men expresion
    (30) expresion -> . expresion por expresion
    (31) expresion -> . expresion div expresion
    (32) expresion -> . expresion mod expresion
    (33) expresion -> . expresion pow expresion
    (34) expresion -> . men expresion
    (35) expresion -> . pari expresion pard
    (36) expresion -> . entero
    (37) expresion -> . decimal
    (38) expresion -> . cadena
    (39) expresion -> . caracter
    (40) expresion -> . id

    men             shift and go to state 20
    pari            shift and go to state 50
    entero          shift and go to state 21
    decimal         shift and go to state 22
    cadena          shift and go to state 23
    caracter        shift and go to state 24
    id              shift and go to state 25

    expresion                      shift and go to state 67

state 44

    (29) expresion -> expresion men . expresion
    (28) expresion -> . expresion mas expresion
    (29) expresion -> . expresion men expresion
    (30) expresion -> . expresion por expresion
    (31) expresion -> . expresion div expresion
    (32) expresion -> . expresion mod expresion
    (33) expresion -> . expresion pow expresion
    (34) expresion -> . men expresion
    (35) expresion -> . pari expresion pard
    (36) expresion -> . entero
    (37) expresion -> . decimal
    (38) expresion -> . cadena
    (39) expresion -> . caracter
    (40) expresion -> . id

    men             shift and go to state 20
    pari            shift and go to state 50
    entero          shift and go to state 21
    decimal         shift and go to state 22
    cadena          shift and go to state 23
    caracter        shift and go to state 24
    id              shift and go to state 25

    expresion                      shift and go to state 68

state 45

    (30) expresion -> expresion por . expresion
    (28) expresion -> . expresion mas expresion
    (29) expresion -> . expresion men expresion
    (30) expresion -> . expresion por expresion
    (31) expresion -> . expresion div expresion
    (32) expresion -> . expresion mod expresion
    (33) expresion -> . expresion pow expresion
    (34) expresion -> . men expresion
    (35) expresion -> . pari expresion pard
    (36) expresion -> . entero
    (37) expresion -> . decimal
    (38) expresion -> . cadena
    (39) expresion -> . caracter
    (40) expresion -> . id

    men             shift and go to state 20
    pari            shift and go to state 50
    entero          shift and go to state 21
    decimal         shift and go to state 22
    cadena          shift and go to state 23
    caracter        shift and go to state 24
    id              shift and go to state 25

    expresion                      shift and go to state 69

state 46

    (31) expresion -> expresion div . expresion
    (28) expresion -> . expresion mas expresion
    (29) expresion -> . expresion men expresion
    (30) expresion -> . expresion por expresion
    (31) expresion -> . expresion div expresion
    (32) expresion -> . expresion mod expresion
    (33) expresion -> . expresion pow expresion
    (34) expresion -> . men expresion
    (35) expresion -> . pari expresion pard
    (36) expresion -> . entero
    (37) expresion -> . decimal
    (38) expresion -> . cadena
    (39) expresion -> . caracter
    (40) expresion -> . id

    men             shift and go to state 20
    pari            shift and go to state 50
    entero          shift and go to state 21
    decimal         shift and go to state 22
    cadena          shift and go to state 23
    caracter        shift and go to state 24
    id              shift and go to state 25

    expresion                      shift and go to state 70

state 47

    (32) expresion -> expresion mod . expresion
    (28) expresion -> . expresion mas expresion
    (29) expresion -> . expresion men expresion
    (30) expresion -> . expresion por expresion
    (31) expresion -> . expresion div expresion
    (32) expresion -> . expresion mod expresion
    (33) expresion -> . expresion pow expresion
    (34) expresion -> . men expresion
    (35) expresion -> . pari expresion pard
    (36) expresion -> . entero
    (37) expresion -> . decimal
    (38) expresion -> . cadena
    (39) expresion -> . caracter
    (40) expresion -> . id

    men             shift and go to state 20
    pari            shift and go to state 50
    entero          shift and go to state 21
    decimal         shift and go to state 22
    cadena          shift and go to state 23
    caracter        shift and go to state 24
    id              shift and go to state 25

    expresion                      shift and go to state 71

state 48

    (33) expresion -> expresion pow . expresion
    (28) expresion -> . expresion mas expresion
    (29) expresion -> . expresion men expresion
    (30) expresion -> . expresion por expresion
    (31) expresion -> . expresion div expresion
    (32) expresion -> . expresion mod expresion
    (33) expresion -> . expresion pow expresion
    (34) expresion -> . men expresion
    (35) expresion -> . pari expresion pard
    (36) expresion -> . entero
    (37) expresion -> . decimal
    (38) expresion -> . cadena
    (39) expresion -> . caracter
    (40) expresion -> . id

    men             shift and go to state 20
    pari            shift and go to state 50
    entero          shift and go to state 21
    decimal         shift and go to state 22
    cadena          shift and go to state 23
    caracter        shift and go to state 24
    id              shift and go to state 25

    expresion                      shift and go to state 72

state 49

    (34) expresion -> men expresion .
    (28) expresion -> expresion . mas expresion
    (29) expresion -> expresion . men expresion
    (30) expresion -> expresion . por expresion
    (31) expresion -> expresion . div expresion
    (32) expresion -> expresion . mod expresion
    (33) expresion -> expresion . pow expresion

    mayque          reduce using rule 34 (expresion -> men expresion .)
    menque          reduce using rule 34 (expresion -> men expresion .)
    mayigual        reduce using rule 34 (expresion -> men expresion .)
    menigual        reduce using rule 34 (expresion -> men expresion .)
    igualque        reduce using rule 34 (expresion -> men expresion .)
    difque          reduce using rule 34 (expresion -> men expresion .)
    mas             reduce using rule 34 (expresion -> men expresion .)
    men             reduce using rule 34 (expresion -> men expresion .)
    por             reduce using rule 34 (expresion -> men expresion .)
    div             reduce using rule 34 (expresion -> men expresion .)
    mod             reduce using rule 34 (expresion -> men expresion .)
    pard            reduce using rule 34 (expresion -> men expresion .)
    pyc             reduce using rule 34 (expresion -> men expresion .)
    then            reduce using rule 34 (expresion -> men expresion .)
    or              reduce using rule 34 (expresion -> men expresion .)
    xor             reduce using rule 34 (expresion -> men expresion .)
    and             reduce using rule 34 (expresion -> men expresion .)
    do              reduce using rule 34 (expresion -> men expresion .)
    to              reduce using rule 34 (expresion -> men expresion .)
    pow             shift and go to state 48

  ! pow             [ reduce using rule 34 (expresion -> men expresion .) ]
  ! mas             [ shift and go to state 43 ]
  ! men             [ shift and go to state 44 ]
  ! por             [ shift and go to state 45 ]
  ! div             [ shift and go to state 46 ]
  ! mod             [ shift and go to state 47 ]


state 50

    (35) expresion -> pari . expresion pard
    (28) expresion -> . expresion mas expresion
    (29) expresion -> . expresion men expresion
    (30) expresion -> . expresion por expresion
    (31) expresion -> . expresion div expresion
    (32) expresion -> . expresion mod expresion
    (33) expresion -> . expresion pow expresion
    (34) expresion -> . men expresion
    (35) expresion -> . pari expresion pard
    (36) expresion -> . entero
    (37) expresion -> . decimal
    (38) expresion -> . cadena
    (39) expresion -> . caracter
    (40) expresion -> . id

    men             shift and go to state 20
    pari            shift and go to state 50
    entero          shift and go to state 21
    decimal         shift and go to state 22
    cadena          shift and go to state 23
    caracter        shift and go to state 24
    id              shift and go to state 25

    expresion                      shift and go to state 73

state 51

    (14) wwhile -> while condicion do . llai Lsent llad

    llai            shift and go to state 74


state 52

    (15) dowhile -> do llai Lsent . llad while condicion pyc
    (4) Lsent -> Lsent . sent
    (6) sent -> . iif
    (7) sent -> . wwhile
    (8) sent -> . dowhile
    (9) sent -> . ffor
    (10) sent -> . asign
    (11) iif -> . if condicion then llai Lsent llad
    (12) iif -> . if condicion then llai Lsent llad else llai Lsent llad
    (14) wwhile -> . while condicion do llai Lsent llad
    (15) dowhile -> . do llai Lsent llad while condicion pyc
    (13) ffor -> . for id igual expresion to expresion do llai Lsent llad
    (16) asign -> . id igual expresion pyc

    llad            shift and go to state 75
    if              shift and go to state 10
    while           shift and go to state 11
    do              shift and go to state 12
    for             shift and go to state 13
    id              shift and go to state 14

    sent                           shift and go to state 15
    iif                            shift and go to state 5
    wwhile                         shift and go to state 6
    dowhile                        shift and go to state 7
    ffor                           shift and go to state 8
    asign                          shift and go to state 9

state 53

    (13) ffor -> for id igual . expresion to expresion do llai Lsent llad
    (28) expresion -> . expresion mas expresion
    (29) expresion -> . expresion men expresion
    (30) expresion -> . expresion por expresion
    (31) expresion -> . expresion div expresion
    (32) expresion -> . expresion mod expresion
    (33) expresion -> . expresion pow expresion
    (34) expresion -> . men expresion
    (35) expresion -> . pari expresion pard
    (36) expresion -> . entero
    (37) expresion -> . decimal
    (38) expresion -> . cadena
    (39) expresion -> . caracter
    (40) expresion -> . id

    men             shift and go to state 20
    pari            shift and go to state 50
    entero          shift and go to state 21
    decimal         shift and go to state 22
    cadena          shift and go to state 23
    caracter        shift and go to state 24
    id              shift and go to state 25

    expresion                      shift and go to state 76

state 54

    (16) asign -> id igual expresion . pyc
    (28) expresion -> expresion . mas expresion
    (29) expresion -> expresion . men expresion
    (30) expresion -> expresion . por expresion
    (31) expresion -> expresion . div expresion
    (32) expresion -> expresion . mod expresion
    (33) expresion -> expresion . pow expresion

    pyc             shift and go to state 77
    mas             shift and go to state 43
    men             shift and go to state 44
    por             shift and go to state 45
    div             shift and go to state 46
    mod             shift and go to state 47
    pow             shift and go to state 48


state 55

    (11) iif -> if condicion then llai . Lsent llad
    (12) iif -> if condicion then llai . Lsent llad else llai Lsent llad
    (4) Lsent -> . Lsent sent
    (5) Lsent -> . sent
    (6) sent -> . iif
    (7) sent -> . wwhile
    (8) sent -> . dowhile
    (9) sent -> . ffor
    (10) sent -> . asign
    (11) iif -> . if condicion then llai Lsent llad
    (12) iif -> . if condicion then llai Lsent llad else llai Lsent llad
    (14) wwhile -> . while condicion do llai Lsent llad
    (15) dowhile -> . do llai Lsent llad while condicion pyc
    (13) ffor -> . for id igual expresion to expresion do llai Lsent llad
    (16) asign -> . id igual expresion pyc

    if              shift and go to state 10
    while           shift and go to state 11
    do              shift and go to state 12
    for             shift and go to state 13
    id              shift and go to state 14

    Lsent                          shift and go to state 78
    sent                           shift and go to state 4
    iif                            shift and go to state 5
    wwhile                         shift and go to state 6
    dowhile                        shift and go to state 7
    ffor                           shift and go to state 8
    asign                          shift and go to state 9

state 56

    (17) condicion -> condicion or condicion .
    (17) condicion -> condicion . or condicion
    (18) condicion -> condicion . xor condicion
    (19) condicion -> condicion . and condicion

    then            reduce using rule 17 (condicion -> condicion or condicion .)
    or              reduce using rule 17 (condicion -> condicion or condicion .)
    do              reduce using rule 17 (condicion -> condicion or condicion .)
    pard            reduce using rule 17 (condicion -> condicion or condicion .)
    pyc             reduce using rule 17 (condicion -> condicion or condicion .)
    xor             shift and go to state 32
    and             shift and go to state 33

  ! xor             [ reduce using rule 17 (condicion -> condicion or condicion .) ]
  ! and             [ reduce using rule 17 (condicion -> condicion or condicion .) ]
  ! or              [ shift and go to state 31 ]


state 57

    (18) condicion -> condicion xor condicion .
    (17) condicion -> condicion . or condicion
    (18) condicion -> condicion . xor condicion
    (19) condicion -> condicion . and condicion

    then            reduce using rule 18 (condicion -> condicion xor condicion .)
    or              reduce using rule 18 (condicion -> condicion xor condicion .)
    xor             reduce using rule 18 (condicion -> condicion xor condicion .)
    do              reduce using rule 18 (condicion -> condicion xor condicion .)
    pard            reduce using rule 18 (condicion -> condicion xor condicion .)
    pyc             reduce using rule 18 (condicion -> condicion xor condicion .)
    and             shift and go to state 33

  ! and             [ reduce using rule 18 (condicion -> condicion xor condicion .) ]
  ! or              [ shift and go to state 31 ]
  ! xor             [ shift and go to state 32 ]


state 58

    (19) condicion -> condicion and condicion .
    (17) condicion -> condicion . or condicion
    (18) condicion -> condicion . xor condicion
    (19) condicion -> condicion . and condicion

    then            reduce using rule 19 (condicion -> condicion and condicion .)
    or              reduce using rule 19 (condicion -> condicion and condicion .)
    xor             reduce using rule 19 (condicion -> condicion and condicion .)
    and             reduce using rule 19 (condicion -> condicion and condicion .)
    do              reduce using rule 19 (condicion -> condicion and condicion .)
    pard            reduce using rule 19 (condicion -> condicion and condicion .)
    pyc             reduce using rule 19 (condicion -> condicion and condicion .)

  ! or              [ shift and go to state 31 ]
  ! xor             [ shift and go to state 32 ]
  ! and             [ shift and go to state 33 ]


state 59

    (21) condicion -> pari condicion pard .

    then            reduce using rule 21 (condicion -> pari condicion pard .)
    or              reduce using rule 21 (condicion -> pari condicion pard .)
    xor             reduce using rule 21 (condicion -> pari condicion pard .)
    and             reduce using rule 21 (condicion -> pari condicion pard .)
    do              reduce using rule 21 (condicion -> pari condicion pard .)
    pard            reduce using rule 21 (condicion -> pari condicion pard .)
    pyc             reduce using rule 21 (condicion -> pari condicion pard .)


state 60

    (35) expresion -> pari expresion pard .

    mayque          reduce using rule 35 (expresion -> pari expresion pard .)
    menque          reduce using rule 35 (expresion -> pari expresion pard .)
    mayigual        reduce using rule 35 (expresion -> pari expresion pard .)
    menigual        reduce using rule 35 (expresion -> pari expresion pard .)
    igualque        reduce using rule 35 (expresion -> pari expresion pard .)
    difque          reduce using rule 35 (expresion -> pari expresion pard .)
    mas             reduce using rule 35 (expresion -> pari expresion pard .)
    men             reduce using rule 35 (expresion -> pari expresion pard .)
    por             reduce using rule 35 (expresion -> pari expresion pard .)
    div             reduce using rule 35 (expresion -> pari expresion pard .)
    mod             reduce using rule 35 (expresion -> pari expresion pard .)
    pow             reduce using rule 35 (expresion -> pari expresion pard .)
    pard            reduce using rule 35 (expresion -> pari expresion pard .)
    pyc             reduce using rule 35 (expresion -> pari expresion pard .)
    then            reduce using rule 35 (expresion -> pari expresion pard .)
    or              reduce using rule 35 (expresion -> pari expresion pard .)
    xor             reduce using rule 35 (expresion -> pari expresion pard .)
    and             reduce using rule 35 (expresion -> pari expresion pard .)
    do              reduce using rule 35 (expresion -> pari expresion pard .)
    to              reduce using rule 35 (expresion -> pari expresion pard .)


state 61

    (22) condicion -> expresion mayque expresion .
    (28) expresion -> expresion . mas expresion
    (29) expresion -> expresion . men expresion
    (30) expresion -> expresion . por expresion
    (31) expresion -> expresion . div expresion
    (32) expresion -> expresion . mod expresion
    (33) expresion -> expresion . pow expresion

    then            reduce using rule 22 (condicion -> expresion mayque expresion .)
    or              reduce using rule 22 (condicion -> expresion mayque expresion .)
    xor             reduce using rule 22 (condicion -> expresion mayque expresion .)
    and             reduce using rule 22 (condicion -> expresion mayque expresion .)
    do              reduce using rule 22 (condicion -> expresion mayque expresion .)
    pard            reduce using rule 22 (condicion -> expresion mayque expresion .)
    pyc             reduce using rule 22 (condicion -> expresion mayque expresion .)
    mas             shift and go to state 43
    men             shift and go to state 44
    por             shift and go to state 45
    div             shift and go to state 46
    mod             shift and go to state 47
    pow             shift and go to state 48


state 62

    (23) condicion -> expresion menque expresion .
    (28) expresion -> expresion . mas expresion
    (29) expresion -> expresion . men expresion
    (30) expresion -> expresion . por expresion
    (31) expresion -> expresion . div expresion
    (32) expresion -> expresion . mod expresion
    (33) expresion -> expresion . pow expresion

    then            reduce using rule 23 (condicion -> expresion menque expresion .)
    or              reduce using rule 23 (condicion -> expresion menque expresion .)
    xor             reduce using rule 23 (condicion -> expresion menque expresion .)
    and             reduce using rule 23 (condicion -> expresion menque expresion .)
    do              reduce using rule 23 (condicion -> expresion menque expresion .)
    pard            reduce using rule 23 (condicion -> expresion menque expresion .)
    pyc             reduce using rule 23 (condicion -> expresion menque expresion .)
    mas             shift and go to state 43
    men             shift and go to state 44
    por             shift and go to state 45
    div             shift and go to state 46
    mod             shift and go to state 47
    pow             shift and go to state 48


state 63

    (24) condicion -> expresion mayigual expresion .
    (28) expresion -> expresion . mas expresion
    (29) expresion -> expresion . men expresion
    (30) expresion -> expresion . por expresion
    (31) expresion -> expresion . div expresion
    (32) expresion -> expresion . mod expresion
    (33) expresion -> expresion . pow expresion

    then            reduce using rule 24 (condicion -> expresion mayigual expresion .)
    or              reduce using rule 24 (condicion -> expresion mayigual expresion .)
    xor             reduce using rule 24 (condicion -> expresion mayigual expresion .)
    and             reduce using rule 24 (condicion -> expresion mayigual expresion .)
    do              reduce using rule 24 (condicion -> expresion mayigual expresion .)
    pard            reduce using rule 24 (condicion -> expresion mayigual expresion .)
    pyc             reduce using rule 24 (condicion -> expresion mayigual expresion .)
    mas             shift and go to state 43
    men             shift and go to state 44
    por             shift and go to state 45
    div             shift and go to state 46
    mod             shift and go to state 47
    pow             shift and go to state 48


state 64

    (25) condicion -> expresion menigual expresion .
    (28) expresion -> expresion . mas expresion
    (29) expresion -> expresion . men expresion
    (30) expresion -> expresion . por expresion
    (31) expresion -> expresion . div expresion
    (32) expresion -> expresion . mod expresion
    (33) expresion -> expresion . pow expresion

    then            reduce using rule 25 (condicion -> expresion menigual expresion .)
    or              reduce using rule 25 (condicion -> expresion menigual expresion .)
    xor             reduce using rule 25 (condicion -> expresion menigual expresion .)
    and             reduce using rule 25 (condicion -> expresion menigual expresion .)
    do              reduce using rule 25 (condicion -> expresion menigual expresion .)
    pard            reduce using rule 25 (condicion -> expresion menigual expresion .)
    pyc             reduce using rule 25 (condicion -> expresion menigual expresion .)
    mas             shift and go to state 43
    men             shift and go to state 44
    por             shift and go to state 45
    div             shift and go to state 46
    mod             shift and go to state 47
    pow             shift and go to state 48


state 65

    (26) condicion -> expresion igualque expresion .
    (28) expresion -> expresion . mas expresion
    (29) expresion -> expresion . men expresion
    (30) expresion -> expresion . por expresion
    (31) expresion -> expresion . div expresion
    (32) expresion -> expresion . mod expresion
    (33) expresion -> expresion . pow expresion

    then            reduce using rule 26 (condicion -> expresion igualque expresion .)
    or              reduce using rule 26 (condicion -> expresion igualque expresion .)
    xor             reduce using rule 26 (condicion -> expresion igualque expresion .)
    and             reduce using rule 26 (condicion -> expresion igualque expresion .)
    do              reduce using rule 26 (condicion -> expresion igualque expresion .)
    pard            reduce using rule 26 (condicion -> expresion igualque expresion .)
    pyc             reduce using rule 26 (condicion -> expresion igualque expresion .)
    mas             shift and go to state 43
    men             shift and go to state 44
    por             shift and go to state 45
    div             shift and go to state 46
    mod             shift and go to state 47
    pow             shift and go to state 48


state 66

    (27) condicion -> expresion difque expresion .
    (28) expresion -> expresion . mas expresion
    (29) expresion -> expresion . men expresion
    (30) expresion -> expresion . por expresion
    (31) expresion -> expresion . div expresion
    (32) expresion -> expresion . mod expresion
    (33) expresion -> expresion . pow expresion

    then            reduce using rule 27 (condicion -> expresion difque expresion .)
    or              reduce using rule 27 (condicion -> expresion difque expresion .)
    xor             reduce using rule 27 (condicion -> expresion difque expresion .)
    and             reduce using rule 27 (condicion -> expresion difque expresion .)
    do              reduce using rule 27 (condicion -> expresion difque expresion .)
    pard            reduce using rule 27 (condicion -> expresion difque expresion .)
    pyc             reduce using rule 27 (condicion -> expresion difque expresion .)
    mas             shift and go to state 43
    men             shift and go to state 44
    por             shift and go to state 45
    div             shift and go to state 46
    mod             shift and go to state 47
    pow             shift and go to state 48


state 67

    (28) expresion -> expresion mas expresion .
    (28) expresion -> expresion . mas expresion
    (29) expresion -> expresion . men expresion
    (30) expresion -> expresion . por expresion
    (31) expresion -> expresion . div expresion
    (32) expresion -> expresion . mod expresion
    (33) expresion -> expresion . pow expresion

    mayque          reduce using rule 28 (expresion -> expresion mas expresion .)
    menque          reduce using rule 28 (expresion -> expresion mas expresion .)
    mayigual        reduce using rule 28 (expresion -> expresion mas expresion .)
    menigual        reduce using rule 28 (expresion -> expresion mas expresion .)
    igualque        reduce using rule 28 (expresion -> expresion mas expresion .)
    difque          reduce using rule 28 (expresion -> expresion mas expresion .)
    mas             reduce using rule 28 (expresion -> expresion mas expresion .)
    men             reduce using rule 28 (expresion -> expresion mas expresion .)
    pard            reduce using rule 28 (expresion -> expresion mas expresion .)
    pyc             reduce using rule 28 (expresion -> expresion mas expresion .)
    then            reduce using rule 28 (expresion -> expresion mas expresion .)
    or              reduce using rule 28 (expresion -> expresion mas expresion .)
    xor             reduce using rule 28 (expresion -> expresion mas expresion .)
    and             reduce using rule 28 (expresion -> expresion mas expresion .)
    do              reduce using rule 28 (expresion -> expresion mas expresion .)
    to              reduce using rule 28 (expresion -> expresion mas expresion .)
    por             shift and go to state 45
    div             shift and go to state 46
    mod             shift and go to state 47
    pow             shift and go to state 48

  ! por             [ reduce using rule 28 (expresion -> expresion mas expresion .) ]
  ! div             [ reduce using rule 28 (expresion -> expresion mas expresion .) ]
  ! mod             [ reduce using rule 28 (expresion -> expresion mas expresion .) ]
  ! pow             [ reduce using rule 28 (expresion -> expresion mas expresion .) ]
  ! mas             [ shift and go to state 43 ]
  ! men             [ shift and go to state 44 ]


state 68

    (29) expresion -> expresion men expresion .
    (28) expresion -> expresion . mas expresion
    (29) expresion -> expresion . men expresion
    (30) expresion -> expresion . por expresion
    (31) expresion -> expresion . div expresion
    (32) expresion -> expresion . mod expresion
    (33) expresion -> expresion . pow expresion

    mayque          reduce using rule 29 (expresion -> expresion men expresion .)
    menque          reduce using rule 29 (expresion -> expresion men expresion .)
    mayigual        reduce using rule 29 (expresion -> expresion men expresion .)
    menigual        reduce using rule 29 (expresion -> expresion men expresion .)
    igualque        reduce using rule 29 (expresion -> expresion men expresion .)
    difque          reduce using rule 29 (expresion -> expresion men expresion .)
    mas             reduce using rule 29 (expresion -> expresion men expresion .)
    men             reduce using rule 29 (expresion -> expresion men expresion .)
    pard            reduce using rule 29 (expresion -> expresion men expresion .)
    pyc             reduce using rule 29 (expresion -> expresion men expresion .)
    then            reduce using rule 29 (expresion -> expresion men expresion .)
    or              reduce using rule 29 (expresion -> expresion men expresion .)
    xor             reduce using rule 29 (expresion -> expresion men expresion .)
    and             reduce using rule 29 (expresion -> expresion men expresion .)
    do              reduce using rule 29 (expresion -> expresion men expresion .)
    to              reduce using rule 29 (expresion -> expresion men expresion .)
    por             shift and go to state 45
    div             shift and go to state 46
    mod             shift and go to state 47
    pow             shift and go to state 48

  ! por             [ reduce using rule 29 (expresion -> expresion men expresion .) ]
  ! div             [ reduce using rule 29 (expresion -> expresion men expresion .) ]
  ! mod             [ reduce using rule 29 (expresion -> expresion men expresion .) ]
  ! pow             [ reduce using rule 29 (expresion -> expresion men expresion .) ]
  ! mas             [ shift and go to state 43 ]
  ! men             [ shift and go to state 44 ]


state 69

    (30) expresion -> expresion por expresion .
    (28) expresion -> expresion . mas expresion
    (29) expresion -> expresion . men expresion
    (30) expresion -> expresion . por expresion
    (31) expresion -> expresion . div expresion
    (32) expresion -> expresion . mod expresion
    (33) expresion -> expresion . pow expresion

    mayque          reduce using rule 30 (expresion -> expresion por expresion .)
    menque          reduce using rule 30 (expresion -> expresion por expresion .)
    mayigual        reduce using rule 30 (expresion -> expresion por expresion .)
    menigual        reduce using rule 30 (expresion -> expresion por expresion .)
    igualque        reduce using rule 30 (expresion -> expresion por expresion .)
    difque          reduce using rule 30 (expresion -> expresion por expresion .)
    mas             reduce using rule 30 (expresion -> expresion por expresion .)
    men             reduce using rule 30 (expresion -> expresion por expresion .)
    por             reduce using rule 30 (expresion -> expresion por expresion .)
    div             reduce using rule 30 (expresion -> expresion por expresion .)
    mod             reduce using rule 30 (expresion -> expresion por expresion .)
    pard            reduce using rule 30 (expresion -> expresion por expresion .)
    pyc             reduce using rule 30 (expresion -> expresion por expresion .)
    then            reduce using rule 30 (expresion -> expresion por expresion .)
    or              reduce using rule 30 (expresion -> expresion por expresion .)
    xor             reduce using rule 30 (expresion -> expresion por expresion .)
    and             reduce using rule 30 (expresion -> expresion por expresion .)
    do              reduce using rule 30 (expresion -> expresion por expresion .)
    to              reduce using rule 30 (expresion -> expresion por expresion .)
    pow             shift and go to state 48

  ! pow             [ reduce using rule 30 (expresion -> expresion por expresion .) ]
  ! mas             [ shift and go to state 43 ]
  ! men             [ shift and go to state 44 ]
  ! por             [ shift and go to state 45 ]
  ! div             [ shift and go to state 46 ]
  ! mod             [ shift and go to state 47 ]


state 70

    (31) expresion -> expresion div expresion .
    (28) expresion -> expresion . mas expresion
    (29) expresion -> expresion . men expresion
    (30) expresion -> expresion . por expresion
    (31) expresion -> expresion . div expresion
    (32) expresion -> expresion . mod expresion
    (33) expresion -> expresion . pow expresion

    mayque          reduce using rule 31 (expresion -> expresion div expresion .)
    menque          reduce using rule 31 (expresion -> expresion div expresion .)
    mayigual        reduce using rule 31 (expresion -> expresion div expresion .)
    menigual        reduce using rule 31 (expresion -> expresion div expresion .)
    igualque        reduce using rule 31 (expresion -> expresion div expresion .)
    difque          reduce using rule 31 (expresion -> expresion div expresion .)
    mas             reduce using rule 31 (expresion -> expresion div expresion .)
    men             reduce using rule 31 (expresion -> expresion div expresion .)
    por             reduce using rule 31 (expresion -> expresion div expresion .)
    div             reduce using rule 31 (expresion -> expresion div expresion .)
    mod             reduce using rule 31 (expresion -> expresion div expresion .)
    pard            reduce using rule 31 (expresion -> expresion div expresion .)
    pyc             reduce using rule 31 (expresion -> expresion div expresion .)
    then            reduce using rule 31 (expresion -> expresion div expresion .)
    or              reduce using rule 31 (expresion -> expresion div expresion .)
    xor             reduce using rule 31 (expresion -> expresion div expresion .)
    and             reduce using rule 31 (expresion -> expresion div expresion .)
    do              reduce using rule 31 (expresion -> expresion div expresion .)
    to              reduce using rule 31 (expresion -> expresion div expresion .)
    pow             shift and go to state 48

  ! pow             [ reduce using rule 31 (expresion -> expresion div expresion .) ]
  ! mas             [ shift and go to state 43 ]
  ! men             [ shift and go to state 44 ]
  ! por             [ shift and go to state 45 ]
  ! div             [ shift and go to state 46 ]
  ! mod             [ shift and go to state 47 ]


state 71

    (32) expresion -> expresion mod expresion .
    (28) expresion -> expresion . mas expresion
    (29) expresion -> expresion . men expresion
    (30) expresion -> expresion . por expresion
    (31) expresion -> expresion . div expresion
    (32) expresion -> expresion . mod expresion
    (33) expresion -> expresion . pow expresion

    mayque          reduce using rule 32 (expresion -> expresion mod expresion .)
    menque          reduce using rule 32 (expresion -> expresion mod expresion .)
    mayigual        reduce using rule 32 (expresion -> expresion mod expresion .)
    menigual        reduce using rule 32 (expresion -> expresion mod expresion .)
    igualque        reduce using rule 32 (expresion -> expresion mod expresion .)
    difque          reduce using rule 32 (expresion -> expresion mod expresion .)
    mas             reduce using rule 32 (expresion -> expresion mod expresion .)
    men             reduce using rule 32 (expresion -> expresion mod expresion .)
    por             reduce using rule 32 (expresion -> expresion mod expresion .)
    div             reduce using rule 32 (expresion -> expresion mod expresion .)
    mod             reduce using rule 32 (expresion -> expresion mod expresion .)
    pard            reduce using rule 32 (expresion -> expresion mod expresion .)
    pyc             reduce using rule 32 (expresion -> expresion mod expresion .)
    then            reduce using rule 32 (expresion -> expresion mod expresion .)
    or              reduce using rule 32 (expresion -> expresion mod expresion .)
    xor             reduce using rule 32 (expresion -> expresion mod expresion .)
    and             reduce using rule 32 (expresion -> expresion mod expresion .)
    do              reduce using rule 32 (expresion -> expresion mod expresion .)
    to              reduce using rule 32 (expresion -> expresion mod expresion .)
    pow             shift and go to state 48

  ! pow             [ reduce using rule 32 (expresion -> expresion mod expresion .) ]
  ! mas             [ shift and go to state 43 ]
  ! men             [ shift and go to state 44 ]
  ! por             [ shift and go to state 45 ]
  ! div             [ shift and go to state 46 ]
  ! mod             [ shift and go to state 47 ]


state 72

    (33) expresion -> expresion pow expresion .
    (28) expresion -> expresion . mas expresion
    (29) expresion -> expresion . men expresion
    (30) expresion -> expresion . por expresion
    (31) expresion -> expresion . div expresion
    (32) expresion -> expresion . mod expresion
    (33) expresion -> expresion . pow expresion

    mayque          reduce using rule 33 (expresion -> expresion pow expresion .)
    menque          reduce using rule 33 (expresion -> expresion pow expresion .)
    mayigual        reduce using rule 33 (expresion -> expresion pow expresion .)
    menigual        reduce using rule 33 (expresion -> expresion pow expresion .)
    igualque        reduce using rule 33 (expresion -> expresion pow expresion .)
    difque          reduce using rule 33 (expresion -> expresion pow expresion .)
    mas             reduce using rule 33 (expresion -> expresion pow expresion .)
    men             reduce using rule 33 (expresion -> expresion pow expresion .)
    por             reduce using rule 33 (expresion -> expresion pow expresion .)
    div             reduce using rule 33 (expresion -> expresion pow expresion .)
    mod             reduce using rule 33 (expresion -> expresion pow expresion .)
    pard            reduce using rule 33 (expresion -> expresion pow expresion .)
    pyc             reduce using rule 33 (expresion -> expresion pow expresion .)
    then            reduce using rule 33 (expresion -> expresion pow expresion .)
    or              reduce using rule 33 (expresion -> expresion pow expresion .)
    xor             reduce using rule 33 (expresion -> expresion pow expresion .)
    and             reduce using rule 33 (expresion -> expresion pow expresion .)
    do              reduce using rule 33 (expresion -> expresion pow expresion .)
    to              reduce using rule 33 (expresion -> expresion pow expresion .)
    pow             shift and go to state 48

  ! pow             [ reduce using rule 33 (expresion -> expresion pow expresion .) ]
  ! mas             [ shift and go to state 43 ]
  ! men             [ shift and go to state 44 ]
  ! por             [ shift and go to state 45 ]
  ! div             [ shift and go to state 46 ]
  ! mod             [ shift and go to state 47 ]


state 73

    (35) expresion -> pari expresion . pard
    (28) expresion -> expresion . mas expresion
    (29) expresion -> expresion . men expresion
    (30) expresion -> expresion . por expresion
    (31) expresion -> expresion . div expresion
    (32) expresion -> expresion . mod expresion
    (33) expresion -> expresion . pow expresion

    pard            shift and go to state 60
    mas             shift and go to state 43
    men             shift and go to state 44
    por             shift and go to state 45
    div             shift and go to state 46
    mod             shift and go to state 47
    pow             shift and go to state 48


state 74

    (14) wwhile -> while condicion do llai . Lsent llad
    (4) Lsent -> . Lsent sent
    (5) Lsent -> . sent
    (6) sent -> . iif
    (7) sent -> . wwhile
    (8) sent -> . dowhile
    (9) sent -> . ffor
    (10) sent -> . asign
    (11) iif -> . if condicion then llai Lsent llad
    (12) iif -> . if condicion then llai Lsent llad else llai Lsent llad
    (14) wwhile -> . while condicion do llai Lsent llad
    (15) dowhile -> . do llai Lsent llad while condicion pyc
    (13) ffor -> . for id igual expresion to expresion do llai Lsent llad
    (16) asign -> . id igual expresion pyc

    if              shift and go to state 10
    while           shift and go to state 11
    do              shift and go to state 12
    for             shift and go to state 13
    id              shift and go to state 14

    Lsent                          shift and go to state 79
    sent                           shift and go to state 4
    iif                            shift and go to state 5
    wwhile                         shift and go to state 6
    dowhile                        shift and go to state 7
    ffor                           shift and go to state 8
    asign                          shift and go to state 9

state 75

    (15) dowhile -> do llai Lsent llad . while condicion pyc

    while           shift and go to state 80


state 76

    (13) ffor -> for id igual expresion . to expresion do llai Lsent llad
    (28) expresion -> expresion . mas expresion
    (29) expresion -> expresion . men expresion
    (30) expresion -> expresion . por expresion
    (31) expresion -> expresion . div expresion
    (32) expresion -> expresion . mod expresion
    (33) expresion -> expresion . pow expresion

    to              shift and go to state 81
    mas             shift and go to state 43
    men             shift and go to state 44
    por             shift and go to state 45
    div             shift and go to state 46
    mod             shift and go to state 47
    pow             shift and go to state 48


state 77

    (16) asign -> id igual expresion pyc .

    if              reduce using rule 16 (asign -> id igual expresion pyc .)
    while           reduce using rule 16 (asign -> id igual expresion pyc .)
    do              reduce using rule 16 (asign -> id igual expresion pyc .)
    for             reduce using rule 16 (asign -> id igual expresion pyc .)
    id              reduce using rule 16 (asign -> id igual expresion pyc .)
    $end            reduce using rule 16 (asign -> id igual expresion pyc .)
    llad            reduce using rule 16 (asign -> id igual expresion pyc .)


state 78

    (11) iif -> if condicion then llai Lsent . llad
    (12) iif -> if condicion then llai Lsent . llad else llai Lsent llad
    (4) Lsent -> Lsent . sent
    (6) sent -> . iif
    (7) sent -> . wwhile
    (8) sent -> . dowhile
    (9) sent -> . ffor
    (10) sent -> . asign
    (11) iif -> . if condicion then llai Lsent llad
    (12) iif -> . if condicion then llai Lsent llad else llai Lsent llad
    (14) wwhile -> . while condicion do llai Lsent llad
    (15) dowhile -> . do llai Lsent llad while condicion pyc
    (13) ffor -> . for id igual expresion to expresion do llai Lsent llad
    (16) asign -> . id igual expresion pyc

    llad            shift and go to state 82
    if              shift and go to state 10
    while           shift and go to state 11
    do              shift and go to state 12
    for             shift and go to state 13
    id              shift and go to state 14

    sent                           shift and go to state 15
    iif                            shift and go to state 5
    wwhile                         shift and go to state 6
    dowhile                        shift and go to state 7
    ffor                           shift and go to state 8
    asign                          shift and go to state 9

state 79

    (14) wwhile -> while condicion do llai Lsent . llad
    (4) Lsent -> Lsent . sent
    (6) sent -> . iif
    (7) sent -> . wwhile
    (8) sent -> . dowhile
    (9) sent -> . ffor
    (10) sent -> . asign
    (11) iif -> . if condicion then llai Lsent llad
    (12) iif -> . if condicion then llai Lsent llad else llai Lsent llad
    (14) wwhile -> . while condicion do llai Lsent llad
    (15) dowhile -> . do llai Lsent llad while condicion pyc
    (13) ffor -> . for id igual expresion to expresion do llai Lsent llad
    (16) asign -> . id igual expresion pyc

    llad            shift and go to state 83
    if              shift and go to state 10
    while           shift and go to state 11
    do              shift and go to state 12
    for             shift and go to state 13
    id              shift and go to state 14

    sent                           shift and go to state 15
    iif                            shift and go to state 5
    wwhile                         shift and go to state 6
    dowhile                        shift and go to state 7
    ffor                           shift and go to state 8
    asign                          shift and go to state 9

state 80

    (15) dowhile -> do llai Lsent llad while . condicion pyc
    (17) condicion -> . condicion or condicion
    (18) condicion -> . condicion xor condicion
    (19) condicion -> . condicion and condicion
    (20) condicion -> . not condicion
    (21) condicion -> . pari condicion pard
    (22) condicion -> . expresion mayque expresion
    (23) condicion -> . expresion menque expresion
    (24) condicion -> . expresion mayigual expresion
    (25) condicion -> . expresion menigual expresion
    (26) condicion -> . expresion igualque expresion
    (27) condicion -> . expresion difque expresion
    (28) expresion -> . expresion mas expresion
    (29) expresion -> . expresion men expresion
    (30) expresion -> . expresion por expresion
    (31) expresion -> . expresion div expresion
    (32) expresion -> . expresion mod expresion
    (33) expresion -> . expresion pow expresion
    (34) expresion -> . men expresion
    (35) expresion -> . pari expresion pard
    (36) expresion -> . entero
    (37) expresion -> . decimal
    (38) expresion -> . cadena
    (39) expresion -> . caracter
    (40) expresion -> . id

    not             shift and go to state 17
    pari            shift and go to state 18
    men             shift and go to state 20
    entero          shift and go to state 21
    decimal         shift and go to state 22
    cadena          shift and go to state 23
    caracter        shift and go to state 24
    id              shift and go to state 25

    condicion                      shift and go to state 84
    expresion                      shift and go to state 19

state 81

    (13) ffor -> for id igual expresion to . expresion do llai Lsent llad
    (28) expresion -> . expresion mas expresion
    (29) expresion -> . expresion men expresion
    (30) expresion -> . expresion por expresion
    (31) expresion -> . expresion div expresion
    (32) expresion -> . expresion mod expresion
    (33) expresion -> . expresion pow expresion
    (34) expresion -> . men expresion
    (35) expresion -> . pari expresion pard
    (36) expresion -> . entero
    (37) expresion -> . decimal
    (38) expresion -> . cadena
    (39) expresion -> . caracter
    (40) expresion -> . id

    men             shift and go to state 20
    pari            shift and go to state 50
    entero          shift and go to state 21
    decimal         shift and go to state 22
    cadena          shift and go to state 23
    caracter        shift and go to state 24
    id              shift and go to state 25

    expresion                      shift and go to state 85

state 82

    (11) iif -> if condicion then llai Lsent llad .
    (12) iif -> if condicion then llai Lsent llad . else llai Lsent llad

    if              reduce using rule 11 (iif -> if condicion then llai Lsent llad .)
    while           reduce using rule 11 (iif -> if condicion then llai Lsent llad .)
    do              reduce using rule 11 (iif -> if condicion then llai Lsent llad .)
    for             reduce using rule 11 (iif -> if condicion then llai Lsent llad .)
    id              reduce using rule 11 (iif -> if condicion then llai Lsent llad .)
    $end            reduce using rule 11 (iif -> if condicion then llai Lsent llad .)
    llad            reduce using rule 11 (iif -> if condicion then llai Lsent llad .)
    else            shift and go to state 86


state 83

    (14) wwhile -> while condicion do llai Lsent llad .

    if              reduce using rule 14 (wwhile -> while condicion do llai Lsent llad .)
    while           reduce using rule 14 (wwhile -> while condicion do llai Lsent llad .)
    do              reduce using rule 14 (wwhile -> while condicion do llai Lsent llad .)
    for             reduce using rule 14 (wwhile -> while condicion do llai Lsent llad .)
    id              reduce using rule 14 (wwhile -> while condicion do llai Lsent llad .)
    $end            reduce using rule 14 (wwhile -> while condicion do llai Lsent llad .)
    llad            reduce using rule 14 (wwhile -> while condicion do llai Lsent llad .)


state 84

    (15) dowhile -> do llai Lsent llad while condicion . pyc
    (17) condicion -> condicion . or condicion
    (18) condicion -> condicion . xor condicion
    (19) condicion -> condicion . and condicion

    pyc             shift and go to state 87
    or              shift and go to state 31
    xor             shift and go to state 32
    and             shift and go to state 33


state 85

    (13) ffor -> for id igual expresion to expresion . do llai Lsent llad
    (28) expresion -> expresion . mas expresion
    (29) expresion -> expresion . men expresion
    (30) expresion -> expresion . por expresion
    (31) expresion -> expresion . div expresion
    (32) expresion -> expresion . mod expresion
    (33) expresion -> expresion . pow expresion

    do              shift and go to state 88
    mas             shift and go to state 43
    men             shift and go to state 44
    por             shift and go to state 45
    div             shift and go to state 46
    mod             shift and go to state 47
    pow             shift and go to state 48


state 86

    (12) iif -> if condicion then llai Lsent llad else . llai Lsent llad

    llai            shift and go to state 89


state 87

    (15) dowhile -> do llai Lsent llad while condicion pyc .

    if              reduce using rule 15 (dowhile -> do llai Lsent llad while condicion pyc .)
    while           reduce using rule 15 (dowhile -> do llai Lsent llad while condicion pyc .)
    do              reduce using rule 15 (dowhile -> do llai Lsent llad while condicion pyc .)
    for             reduce using rule 15 (dowhile -> do llai Lsent llad while condicion pyc .)
    id              reduce using rule 15 (dowhile -> do llai Lsent llad while condicion pyc .)
    $end            reduce using rule 15 (dowhile -> do llai Lsent llad while condicion pyc .)
    llad            reduce using rule 15 (dowhile -> do llai Lsent llad while condicion pyc .)


state 88

    (13) ffor -> for id igual expresion to expresion do . llai Lsent llad

    llai            shift and go to state 90


state 89

    (12) iif -> if condicion then llai Lsent llad else llai . Lsent llad
    (4) Lsent -> . Lsent sent
    (5) Lsent -> . sent
    (6) sent -> . iif
    (7) sent -> . wwhile
    (8) sent -> . dowhile
    (9) sent -> . ffor
    (10) sent -> . asign
    (11) iif -> . if condicion then llai Lsent llad
    (12) iif -> . if condicion then llai Lsent llad else llai Lsent llad
    (14) wwhile -> . while condicion do llai Lsent llad
    (15) dowhile -> . do llai Lsent llad while condicion pyc
    (13) ffor -> . for id igual expresion to expresion do llai Lsent llad
    (16) asign -> . id igual expresion pyc

    if              shift and go to state 10
    while           shift and go to state 11
    do              shift and go to state 12
    for             shift and go to state 13
    id              shift and go to state 14

    Lsent                          shift and go to state 91
    sent                           shift and go to state 4
    iif                            shift and go to state 5
    wwhile                         shift and go to state 6
    dowhile                        shift and go to state 7
    ffor                           shift and go to state 8
    asign                          shift and go to state 9

state 90

    (13) ffor -> for id igual expresion to expresion do llai . Lsent llad
    (4) Lsent -> . Lsent sent
    (5) Lsent -> . sent
    (6) sent -> . iif
    (7) sent -> . wwhile
    (8) sent -> . dowhile
    (9) sent -> . ffor
    (10) sent -> . asign
    (11) iif -> . if condicion then llai Lsent llad
    (12) iif -> . if condicion then llai Lsent llad else llai Lsent llad
    (14) wwhile -> . while condicion do llai Lsent llad
    (15) dowhile -> . do llai Lsent llad while condicion pyc
    (13) ffor -> . for id igual expresion to expresion do llai Lsent llad
    (16) asign -> . id igual expresion pyc

    if              shift and go to state 10
    while           shift and go to state 11
    do              shift and go to state 12
    for             shift and go to state 13
    id              shift and go to state 14

    Lsent                          shift and go to state 92
    sent                           shift and go to state 4
    iif                            shift and go to state 5
    wwhile                         shift and go to state 6
    dowhile                        shift and go to state 7
    ffor                           shift and go to state 8
    asign                          shift and go to state 9

state 91

    (12) iif -> if condicion then llai Lsent llad else llai Lsent . llad
    (4) Lsent -> Lsent . sent
    (6) sent -> . iif
    (7) sent -> . wwhile
    (8) sent -> . dowhile
    (9) sent -> . ffor
    (10) sent -> . asign
    (11) iif -> . if condicion then llai Lsent llad
    (12) iif -> . if condicion then llai Lsent llad else llai Lsent llad
    (14) wwhile -> . while condicion do llai Lsent llad
    (15) dowhile -> . do llai Lsent llad while condicion pyc
    (13) ffor -> . for id igual expresion to expresion do llai Lsent llad
    (16) asign -> . id igual expresion pyc

    llad            shift and go to state 93
    if              shift and go to state 10
    while           shift and go to state 11
    do              shift and go to state 12
    for             shift and go to state 13
    id              shift and go to state 14

    sent                           shift and go to state 15
    iif                            shift and go to state 5
    wwhile                         shift and go to state 6
    dowhile                        shift and go to state 7
    ffor                           shift and go to state 8
    asign                          shift and go to state 9

state 92

    (13) ffor -> for id igual expresion to expresion do llai Lsent . llad
    (4) Lsent -> Lsent . sent
    (6) sent -> . iif
    (7) sent -> . wwhile
    (8) sent -> . dowhile
    (9) sent -> . ffor
    (10) sent -> . asign
    (11) iif -> . if condicion then llai Lsent llad
    (12) iif -> . if condicion then llai Lsent llad else llai Lsent llad
    (14) wwhile -> . while condicion do llai Lsent llad
    (15) dowhile -> . do llai Lsent llad while condicion pyc
    (13) ffor -> . for id igual expresion to expresion do llai Lsent llad
    (16) asign -> . id igual expresion pyc

    llad            shift and go to state 94
    if              shift and go to state 10
    while           shift and go to state 11
    do              shift and go to state 12
    for             shift and go to state 13
    id              shift and go to state 14

    sent                           shift and go to state 15
    iif                            shift and go to state 5
    wwhile                         shift and go to state 6
    dowhile                        shift and go to state 7
    ffor                           shift and go to state 8
    asign                          shift and go to state 9

state 93

    (12) iif -> if condicion then llai Lsent llad else llai Lsent llad .

    if              reduce using rule 12 (iif -> if condicion then llai Lsent llad else llai Lsent llad .)
    while           reduce using rule 12 (iif -> if condicion then llai Lsent llad else llai Lsent llad .)
    do              reduce using rule 12 (iif -> if condicion then llai Lsent llad else llai Lsent llad .)
    for             reduce using rule 12 (iif -> if condicion then llai Lsent llad else llai Lsent llad .)
    id              reduce using rule 12 (iif -> if condicion then llai Lsent llad else llai Lsent llad .)
    $end            reduce using rule 12 (iif -> if condicion then llai Lsent llad else llai Lsent llad .)
    llad            reduce using rule 12 (iif -> if condicion then llai Lsent llad else llai Lsent llad .)


state 94

    (13) ffor -> for id igual expresion to expresion do llai Lsent llad .

    if              reduce using rule 13 (ffor -> for id igual expresion to expresion do llai Lsent llad .)
    while           reduce using rule 13 (ffor -> for id igual expresion to expresion do llai Lsent llad .)
    do              reduce using rule 13 (ffor -> for id igual expresion to expresion do llai Lsent llad .)
    for             reduce using rule 13 (ffor -> for id igual expresion to expresion do llai Lsent llad .)
    id              reduce using rule 13 (ffor -> for id igual expresion to expresion do llai Lsent llad .)
    $end            reduce using rule 13 (ffor -> for id igual expresion to expresion do llai Lsent llad .)
    llad            reduce using rule 13 (ffor -> for id igual expresion to expresion do llai Lsent llad .)

